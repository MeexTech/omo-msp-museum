// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/museum/sandtable.proto

package omo_msp_museum

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for SandtableService service

type SandtableService interface {
	AddOne(ctx context.Context, in *ReqSandtableAdd, opts ...client.CallOption) (*ReplySandtableInfo, error)
	GetOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplySandtableInfo, error)
	RemoveOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyInfo, error)
	Search(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplySandtableList, error)
	GetListByFilter(ctx context.Context, in *RequestFilter, opts ...client.CallOption) (*ReplySandtableList, error)
	GetStatistic(ctx context.Context, in *RequestFilter, opts ...client.CallOption) (*ReplyStatistic, error)
	UpdateBase(ctx context.Context, in *ReqSandtableBase, opts ...client.CallOption) (*ReplyInfo, error)
	UpdateBackground(ctx context.Context, in *ReqSandtableBG, opts ...client.CallOption) (*ReplyInfo, error)
	UpdateByFilter(ctx context.Context, in *RequestUpdate, opts ...client.CallOption) (*ReplyInfo, error)
	UpdatePath(ctx context.Context, in *ReqSandtablePath, opts ...client.CallOption) (*ReplyInfo, error)
}

type sandtableService struct {
	c    client.Client
	name string
}

func NewSandtableService(name string, c client.Client) SandtableService {
	return &sandtableService{
		c:    c,
		name: name,
	}
}

func (c *sandtableService) AddOne(ctx context.Context, in *ReqSandtableAdd, opts ...client.CallOption) (*ReplySandtableInfo, error) {
	req := c.c.NewRequest(c.name, "SandtableService.AddOne", in)
	out := new(ReplySandtableInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sandtableService) GetOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplySandtableInfo, error) {
	req := c.c.NewRequest(c.name, "SandtableService.GetOne", in)
	out := new(ReplySandtableInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sandtableService) RemoveOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyInfo, error) {
	req := c.c.NewRequest(c.name, "SandtableService.RemoveOne", in)
	out := new(ReplyInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sandtableService) Search(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplySandtableList, error) {
	req := c.c.NewRequest(c.name, "SandtableService.Search", in)
	out := new(ReplySandtableList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sandtableService) GetListByFilter(ctx context.Context, in *RequestFilter, opts ...client.CallOption) (*ReplySandtableList, error) {
	req := c.c.NewRequest(c.name, "SandtableService.GetListByFilter", in)
	out := new(ReplySandtableList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sandtableService) GetStatistic(ctx context.Context, in *RequestFilter, opts ...client.CallOption) (*ReplyStatistic, error) {
	req := c.c.NewRequest(c.name, "SandtableService.GetStatistic", in)
	out := new(ReplyStatistic)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sandtableService) UpdateBase(ctx context.Context, in *ReqSandtableBase, opts ...client.CallOption) (*ReplyInfo, error) {
	req := c.c.NewRequest(c.name, "SandtableService.UpdateBase", in)
	out := new(ReplyInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sandtableService) UpdateBackground(ctx context.Context, in *ReqSandtableBG, opts ...client.CallOption) (*ReplyInfo, error) {
	req := c.c.NewRequest(c.name, "SandtableService.UpdateBackground", in)
	out := new(ReplyInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sandtableService) UpdateByFilter(ctx context.Context, in *RequestUpdate, opts ...client.CallOption) (*ReplyInfo, error) {
	req := c.c.NewRequest(c.name, "SandtableService.UpdateByFilter", in)
	out := new(ReplyInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sandtableService) UpdatePath(ctx context.Context, in *ReqSandtablePath, opts ...client.CallOption) (*ReplyInfo, error) {
	req := c.c.NewRequest(c.name, "SandtableService.UpdatePath", in)
	out := new(ReplyInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SandtableService service

type SandtableServiceHandler interface {
	AddOne(context.Context, *ReqSandtableAdd, *ReplySandtableInfo) error
	GetOne(context.Context, *RequestInfo, *ReplySandtableInfo) error
	RemoveOne(context.Context, *RequestInfo, *ReplyInfo) error
	Search(context.Context, *RequestInfo, *ReplySandtableList) error
	GetListByFilter(context.Context, *RequestFilter, *ReplySandtableList) error
	GetStatistic(context.Context, *RequestFilter, *ReplyStatistic) error
	UpdateBase(context.Context, *ReqSandtableBase, *ReplyInfo) error
	UpdateBackground(context.Context, *ReqSandtableBG, *ReplyInfo) error
	UpdateByFilter(context.Context, *RequestUpdate, *ReplyInfo) error
	UpdatePath(context.Context, *ReqSandtablePath, *ReplyInfo) error
}

func RegisterSandtableServiceHandler(s server.Server, hdlr SandtableServiceHandler, opts ...server.HandlerOption) error {
	type sandtableService interface {
		AddOne(ctx context.Context, in *ReqSandtableAdd, out *ReplySandtableInfo) error
		GetOne(ctx context.Context, in *RequestInfo, out *ReplySandtableInfo) error
		RemoveOne(ctx context.Context, in *RequestInfo, out *ReplyInfo) error
		Search(ctx context.Context, in *RequestInfo, out *ReplySandtableList) error
		GetListByFilter(ctx context.Context, in *RequestFilter, out *ReplySandtableList) error
		GetStatistic(ctx context.Context, in *RequestFilter, out *ReplyStatistic) error
		UpdateBase(ctx context.Context, in *ReqSandtableBase, out *ReplyInfo) error
		UpdateBackground(ctx context.Context, in *ReqSandtableBG, out *ReplyInfo) error
		UpdateByFilter(ctx context.Context, in *RequestUpdate, out *ReplyInfo) error
		UpdatePath(ctx context.Context, in *ReqSandtablePath, out *ReplyInfo) error
	}
	type SandtableService struct {
		sandtableService
	}
	h := &sandtableServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&SandtableService{h}, opts...))
}

type sandtableServiceHandler struct {
	SandtableServiceHandler
}

func (h *sandtableServiceHandler) AddOne(ctx context.Context, in *ReqSandtableAdd, out *ReplySandtableInfo) error {
	return h.SandtableServiceHandler.AddOne(ctx, in, out)
}

func (h *sandtableServiceHandler) GetOne(ctx context.Context, in *RequestInfo, out *ReplySandtableInfo) error {
	return h.SandtableServiceHandler.GetOne(ctx, in, out)
}

func (h *sandtableServiceHandler) RemoveOne(ctx context.Context, in *RequestInfo, out *ReplyInfo) error {
	return h.SandtableServiceHandler.RemoveOne(ctx, in, out)
}

func (h *sandtableServiceHandler) Search(ctx context.Context, in *RequestInfo, out *ReplySandtableList) error {
	return h.SandtableServiceHandler.Search(ctx, in, out)
}

func (h *sandtableServiceHandler) GetListByFilter(ctx context.Context, in *RequestFilter, out *ReplySandtableList) error {
	return h.SandtableServiceHandler.GetListByFilter(ctx, in, out)
}

func (h *sandtableServiceHandler) GetStatistic(ctx context.Context, in *RequestFilter, out *ReplyStatistic) error {
	return h.SandtableServiceHandler.GetStatistic(ctx, in, out)
}

func (h *sandtableServiceHandler) UpdateBase(ctx context.Context, in *ReqSandtableBase, out *ReplyInfo) error {
	return h.SandtableServiceHandler.UpdateBase(ctx, in, out)
}

func (h *sandtableServiceHandler) UpdateBackground(ctx context.Context, in *ReqSandtableBG, out *ReplyInfo) error {
	return h.SandtableServiceHandler.UpdateBackground(ctx, in, out)
}

func (h *sandtableServiceHandler) UpdateByFilter(ctx context.Context, in *RequestUpdate, out *ReplyInfo) error {
	return h.SandtableServiceHandler.UpdateByFilter(ctx, in, out)
}

func (h *sandtableServiceHandler) UpdatePath(ctx context.Context, in *ReqSandtablePath, out *ReplyInfo) error {
	return h.SandtableServiceHandler.UpdatePath(ctx, in, out)
}
