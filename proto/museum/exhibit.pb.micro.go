// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/museum/exhibit.proto

package omo_msp_museum

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for ExhibitService service

type ExhibitService interface {
	AddOne(ctx context.Context, in *ReqExhibitAdd, opts ...client.CallOption) (*ReplyExhibitInfo, error)
	GetOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyExhibitInfo, error)
	RemoveOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyInfo, error)
	Search(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyExhibitList, error)
	GetListByFilter(ctx context.Context, in *RequestFilter, opts ...client.CallOption) (*ReplyExhibitList, error)
	GetStatistic(ctx context.Context, in *RequestFilter, opts ...client.CallOption) (*ReplyStatistic, error)
	UpdateLocals(ctx context.Context, in *ReqExhibitLocals, opts ...client.CallOption) (*ReplyInfo, error)
	UpdateSpecials(ctx context.Context, in *ReqExhibitSpecials, opts ...client.CallOption) (*ReplyInfo, error)
	UpdateByFilter(ctx context.Context, in *RequestUpdate, opts ...client.CallOption) (*ReplyInfo, error)
}

type exhibitService struct {
	c    client.Client
	name string
}

func NewExhibitService(name string, c client.Client) ExhibitService {
	return &exhibitService{
		c:    c,
		name: name,
	}
}

func (c *exhibitService) AddOne(ctx context.Context, in *ReqExhibitAdd, opts ...client.CallOption) (*ReplyExhibitInfo, error) {
	req := c.c.NewRequest(c.name, "ExhibitService.AddOne", in)
	out := new(ReplyExhibitInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exhibitService) GetOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyExhibitInfo, error) {
	req := c.c.NewRequest(c.name, "ExhibitService.GetOne", in)
	out := new(ReplyExhibitInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exhibitService) RemoveOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyInfo, error) {
	req := c.c.NewRequest(c.name, "ExhibitService.RemoveOne", in)
	out := new(ReplyInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exhibitService) Search(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyExhibitList, error) {
	req := c.c.NewRequest(c.name, "ExhibitService.Search", in)
	out := new(ReplyExhibitList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exhibitService) GetListByFilter(ctx context.Context, in *RequestFilter, opts ...client.CallOption) (*ReplyExhibitList, error) {
	req := c.c.NewRequest(c.name, "ExhibitService.GetListByFilter", in)
	out := new(ReplyExhibitList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exhibitService) GetStatistic(ctx context.Context, in *RequestFilter, opts ...client.CallOption) (*ReplyStatistic, error) {
	req := c.c.NewRequest(c.name, "ExhibitService.GetStatistic", in)
	out := new(ReplyStatistic)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exhibitService) UpdateLocals(ctx context.Context, in *ReqExhibitLocals, opts ...client.CallOption) (*ReplyInfo, error) {
	req := c.c.NewRequest(c.name, "ExhibitService.UpdateLocals", in)
	out := new(ReplyInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exhibitService) UpdateSpecials(ctx context.Context, in *ReqExhibitSpecials, opts ...client.CallOption) (*ReplyInfo, error) {
	req := c.c.NewRequest(c.name, "ExhibitService.UpdateSpecials", in)
	out := new(ReplyInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exhibitService) UpdateByFilter(ctx context.Context, in *RequestUpdate, opts ...client.CallOption) (*ReplyInfo, error) {
	req := c.c.NewRequest(c.name, "ExhibitService.UpdateByFilter", in)
	out := new(ReplyInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ExhibitService service

type ExhibitServiceHandler interface {
	AddOne(context.Context, *ReqExhibitAdd, *ReplyExhibitInfo) error
	GetOne(context.Context, *RequestInfo, *ReplyExhibitInfo) error
	RemoveOne(context.Context, *RequestInfo, *ReplyInfo) error
	Search(context.Context, *RequestInfo, *ReplyExhibitList) error
	GetListByFilter(context.Context, *RequestFilter, *ReplyExhibitList) error
	GetStatistic(context.Context, *RequestFilter, *ReplyStatistic) error
	UpdateLocals(context.Context, *ReqExhibitLocals, *ReplyInfo) error
	UpdateSpecials(context.Context, *ReqExhibitSpecials, *ReplyInfo) error
	UpdateByFilter(context.Context, *RequestUpdate, *ReplyInfo) error
}

func RegisterExhibitServiceHandler(s server.Server, hdlr ExhibitServiceHandler, opts ...server.HandlerOption) error {
	type exhibitService interface {
		AddOne(ctx context.Context, in *ReqExhibitAdd, out *ReplyExhibitInfo) error
		GetOne(ctx context.Context, in *RequestInfo, out *ReplyExhibitInfo) error
		RemoveOne(ctx context.Context, in *RequestInfo, out *ReplyInfo) error
		Search(ctx context.Context, in *RequestInfo, out *ReplyExhibitList) error
		GetListByFilter(ctx context.Context, in *RequestFilter, out *ReplyExhibitList) error
		GetStatistic(ctx context.Context, in *RequestFilter, out *ReplyStatistic) error
		UpdateLocals(ctx context.Context, in *ReqExhibitLocals, out *ReplyInfo) error
		UpdateSpecials(ctx context.Context, in *ReqExhibitSpecials, out *ReplyInfo) error
		UpdateByFilter(ctx context.Context, in *RequestUpdate, out *ReplyInfo) error
	}
	type ExhibitService struct {
		exhibitService
	}
	h := &exhibitServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&ExhibitService{h}, opts...))
}

type exhibitServiceHandler struct {
	ExhibitServiceHandler
}

func (h *exhibitServiceHandler) AddOne(ctx context.Context, in *ReqExhibitAdd, out *ReplyExhibitInfo) error {
	return h.ExhibitServiceHandler.AddOne(ctx, in, out)
}

func (h *exhibitServiceHandler) GetOne(ctx context.Context, in *RequestInfo, out *ReplyExhibitInfo) error {
	return h.ExhibitServiceHandler.GetOne(ctx, in, out)
}

func (h *exhibitServiceHandler) RemoveOne(ctx context.Context, in *RequestInfo, out *ReplyInfo) error {
	return h.ExhibitServiceHandler.RemoveOne(ctx, in, out)
}

func (h *exhibitServiceHandler) Search(ctx context.Context, in *RequestInfo, out *ReplyExhibitList) error {
	return h.ExhibitServiceHandler.Search(ctx, in, out)
}

func (h *exhibitServiceHandler) GetListByFilter(ctx context.Context, in *RequestFilter, out *ReplyExhibitList) error {
	return h.ExhibitServiceHandler.GetListByFilter(ctx, in, out)
}

func (h *exhibitServiceHandler) GetStatistic(ctx context.Context, in *RequestFilter, out *ReplyStatistic) error {
	return h.ExhibitServiceHandler.GetStatistic(ctx, in, out)
}

func (h *exhibitServiceHandler) UpdateLocals(ctx context.Context, in *ReqExhibitLocals, out *ReplyInfo) error {
	return h.ExhibitServiceHandler.UpdateLocals(ctx, in, out)
}

func (h *exhibitServiceHandler) UpdateSpecials(ctx context.Context, in *ReqExhibitSpecials, out *ReplyInfo) error {
	return h.ExhibitServiceHandler.UpdateSpecials(ctx, in, out)
}

func (h *exhibitServiceHandler) UpdateByFilter(ctx context.Context, in *RequestUpdate, out *ReplyInfo) error {
	return h.ExhibitServiceHandler.UpdateByFilter(ctx, in, out)
}
